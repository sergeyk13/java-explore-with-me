{
	"info": {
		"_postman_id": "91667b6e-89a5-49c6-a4a2-d9059f981dd2",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29357158"
	},
	"item": [
		{
			"name": "Add comment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eid', event.id);",
							"",
							"         comment =await rnd.getComment();",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify(comment),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, authorId, createdAt \", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('authorId');",
							"pm.expect(target).to.have.property('createdAt');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.id).to.not.be.null;",
							"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');",
							"});",
							"",
							"pm.test(\"Ответ не должен быть пустым\", function() {",
							"    pm.expect(target).to.not.be.null;",
							"    pm.expect(target).to.not.be.undefined;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/events/:eventid/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"events",
						":eventid",
						"comment"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "eventid",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add comment для не опубликованного события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        pm.collectionVariables.set('eid', event.id);",
							"",
							"        comment =await rnd.getComment();",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify(comment),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/events/:eventid/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"events",
						":eventid",
						"comment"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "eventid",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add comment с пустой строкой",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        ",
							"        pm.collectionVariables.set('eventId', event.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.have.status(400);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\":\"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/events/:eventid/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"events",
						":eventid",
						"comment"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "eventid",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comment by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('comid', comment.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, authorId, createdAt \", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('authorId');",
							"pm.expect(target).to.have.property('createdAt');",
							"});",
							"",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.id).equal(pm.collectionVariables.get(\"comid\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments/:commentid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments",
						":commentid"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "commentid",
							"value": "{{comid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comment Для пользователя не являющегося владельцем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user1.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('comid', comment.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments/:commentid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments",
						":commentid"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "commentid",
							"value": "{{comid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comment by wrong id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('comid', comment.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments/:commentid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments",
						":commentid"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "commentid",
							"value": "999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All comment by User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        ",
							"        const comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"",
							"        const comment2 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, authorId, createdAt \", function () {",
							"pm.expect(target[0]).to.have.property('id');",
							"pm.expect(target[0]).to.have.property('text');",
							"pm.expect(target[0]).to.have.property('authorId');",
							"pm.expect(target[0]).to.have.property('createdAt');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.id).to.not.be.null;",
							"});",
							"",
							"pm.test(\"Должен быть найден только три комментария к данному событию\", function () {",
							"    pm.expect(target.length).to.eql(3);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userid/events/:eventid/comment?from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"events",
						":eventid",
						"comment"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "eventid",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All comment by wrong User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user1.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        ",
							"        const comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"",
							"        const comment2 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Ответ должен быть пустым \", function () {",
							"    pm.expect(target.length).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userid/events/:eventid/comment?from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"events",
						":eventid",
						"comment"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "eventid",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        let comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        ",
							"        let comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('response', comment1);",
							"        pm.collectionVariables.set(\"comid\", comment1.id)",
							"        pm.request.body.update({",
							"            mode: 'raw',",
							"            raw: comment1,",
							"            options: { raw: { language: 'json' } }",
							"        });",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, authorId, createdAt \", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('authorId');",
							"pm.expect(target).to.have.property('createdAt');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.text).equal(target.text, 'Текст события должна соответствовать искомому событию');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/events/:eventid/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"events",
						":eventid",
						"comment"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "eventid",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария не являющимся владельцем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        let comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('uid', user1.id);",
							"        ",
							"        let comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('response', comment1);",
							"        pm.collectionVariables.set(\"comid\", comment1.id)",
							"        pm.request.body.update({",
							"            mode: 'raw',",
							"            raw: comment1,",
							"            options: { raw: { language: 'json' } }",
							"        });",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/events/:eventid/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"events",
						":eventid",
						"comment"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "eventid",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария на пустую строку",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        let comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        ",
							"        let comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('response', comment1);",
							"        pm.collectionVariables.set(\"comid\", comment1.id)",
							"        pm.request.body.update({",
							"            mode: 'raw',",
							"            raw: { \"text\": \"\" },",
							"            options: { raw: { language: 'json' } }",
							"        });",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.have.status(400);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/events/:eventid/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"events",
						":eventid",
						"comment"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "eventid",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаления комментария пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('comid', comment.id);",
							"        pm.collectionVariables.set(\"response\", comment);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify(comment),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const comId = pm.collectionVariables.get('comid');",
							"",
							"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){",
							"    pm.expect(source.id).to.eql(comId);",
							"});",
							"",
							"const req = {",
							"    url: \"http://localhost:8080/users/\" + pm.collectionVariables.get(\"uid\")+ \"/comments/\" + pm.collectionVariables.get(\"comid\"),",
							"    method: \"GET\",",
							"    header: { \"Content-Type\": \"application/json\" },",
							"};",
							"",
							"pm.sendRequest(req, (error, response) => {",
							"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){",
							"        pm.expect(response.code).to.eql(404); // Проверяем, что комментарий не найден (код 404)",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments/:commentid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments",
						":commentid"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "commentid",
							"value": "{{comid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаления комментария пользователем не являющимся владельцем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user1.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('comid', comment.id);",
							"        pm.collectionVariables.set(\"response\", comment);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify(comment),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments/:commentid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments",
						":commentid"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "commentid",
							"value": "{{comid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null){",
					"        return this.post(\"/users/\" + userId + \"/events/\"+ eventId + \"/comment\", comment,\"Ошибка при добавлении нового comment\",verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getComment(){",
					"        return{",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraph}}')",
					"        }",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "comment",
			"value": "",
			"type": "string"
		},
		{
			"key": "comid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "commentText",
			"value": "",
			"type": "string"
		}
	]
}